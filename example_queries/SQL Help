SQL (structured query language) Notes

Non-proprietary
English like statements
Used to create, modify, maintain, query DBs
3 key syntax components:
SELECT (retrieve data from 1 or more tables, need to know where you want from where)
FROM (where to get data)
ORDER BY (Sort data)

Syntax: SELECT column_name FROM table_name;
or SELECT column1, column2 FROM table;
^For mul. columns 

* means select all 
Ex: SELECT * FROM Student;

To select only unique values, use DISTINCT
Ex: SELECT DISTINCT product_number FROM Customer_sales

To order in descending order use DESC
Must be repeated after each field
Ex: ORDER BY student_no DESC

Comments: use # (line) or /* text */

Ex: SELECT student_no, student_name FROM student ORDER BY year_of_study, student_name

Using the WHERE clause as a filtering condition 
Extracts a subset of data
 SELECT column_name
	FROM table_name
		WHERE column_name = value/character string
		
	Need quotes if char or string, don’t 

Ex: SELECT student_number, student_name, year_of_study
	FROM student
		WHERE year_of_study = ‘1’
	ORDER BY student_last_name ;

Hint: When you need ORDER BY clause, make sure it followed WHERE clause 

Operators supported by WHERE clause
=
!=
<> not equal 
<
<=
>
>=
!> (not greater then)
IS NULL
BETWEEN (between 2 values) 

Checking for a range of values requires using the BETWEEN operator- requires 2 values
 SELECT student_number, student_name, year_of_study
	FROM student
		WHERE year_of_study BETWEEN 1 and 2
	ORDER BY student_last_name; 

Can write: Checking for NULLS (not 0 or blank or empty string): WHERE field_name IS NULL

Combine WHERE and AND operator when mul. conditions need to be met
SELECT product_no
	FROM Product
		WHERE product_class = ‘A’ AND Product price <= 2.00 

Combine WHERE and OR operator when one of mul. conditions need to be met from mul. conditions

SELECT product_no
	FROM Product
		WHERE product_ID = ‘XYZ123’ or ‘SS001’

And will process before OR
Use parens to avoid error or confusion 

Use IN operator to specify range of conditions of which any can be a match 
Similar to OR
Make sure to comma deliminate values
WHERE vendor_ID IN (‘XYZ123’,’SSS001’, ‘HHH999’, ‘F90AA1’)

Wild card filtering
% or * wildcards
Used to create search patterns when exact value not known 
Special meaning within SQL WHERE clause
Uses the LIKE operator

Can only be used with text files (char strings)

Matches # of occurrences of any characters 

% will match spaces but not NULL
Ex: WHERE prod_name LIKE ‘%’
Output would include 0, blanks/spaces, but not NULL
Could use to find unfinished entires

Ex: SELECT prod_id, prod_name
FROM products
	WHERE prod_name LIKE ‘folder%’

Output will be all products starting with “folder” in name

Ex: SELECT prod_id, prod_name
FROM products
	WHERE prod_name LIKE ‘%folder%’

Output will be all products with “folder” in name in any position 

_ underscore wildcard
Similar to % but only matches 1 character
Variations in this char. between DBMS
Ex: SELECT prod_id, prod_name
FROM products
	WHERE prod_name LIKE ‘No_pencil’
	
Would select all the dif numbers of pencil. No_ _ pencil wouldn’t work 

[ ] brackets wildcard 
Used to specify a set of characters
Ex: SELECT prod_id, prod_name
FROM products
	WHERE prod_name LIKE ‘[P F]%’
Output would be pencils, paper, folders….
Moving % to front would get things that end with P and F
WHERE prod_name LIKE ‘[^P F]%’
	Output will be stapers, rulers, tape, things that don’t start with F/P

Creating calculated or derived fields
Useful when data stored in your DB is not exactly how you want to show/use it
Method of retrieving data converted, calculated, or reformatted directly from the DB 
Calculated fields should not actually exist/be stored in DB
Often, letting RDBS do the calculating on DB server is faster than within client
Concatenating fields: Joining/appending values to create a single string
Most DBMs use || or + symbol 
“AS” key word
As used here, AS serves as an Alias to hold a derived value for SQL and client application to use; not a physical DB field/column 
Hint: Focus on what you want output to look like and don’t forget space
Calculated/derived columns don’t have an actual table column name (not an actual field, could reuse within name) 
If running an ad-hoc query, this is not a problem
If an applications needs to use that value, you need a way to refer to it
Method- use an alias by leveraging AS keyword
What did SQL do? 
Created a calculated/derived field with an alias name
Allowed a client application to refer to that calculated field by name


Note that the alias names are also used to rename original column names as we learned in field specifications for special cases when same field appears 2x in a table. 

Ex: SELECT vendor_name || ‘(‘ || region || ‘)’
AS vendor_title
FROM Vendor
	ORDER BY vendor_name


Ex: SELECT employee_last_name || ‘,’ || employee_first_name AS employee_name 
FROM Employee
ORDER BY employee_last_name

			So stuff before as being held as employee name

Some RDBMs use CONCAT keyword
Ex: SELECT CONCAT (employee_last_name, ‘, ‘ , employee_first_name);
Also used for mathematical calcs
Ex: SELECT sales_trans_no, sales+sales_tax AS total_sale;

Ex:
SELECT employee_name, employee_email_id
	FROM employee
		WHERE employee_DOB_year < 1960 AND (employee_dept LIKE ‘%Fin%’ OR employee_dept LIKE ‘%Mark%’)


SELECT aisle_number, shelf_number, item_name,  item_number ||’_(‘ || spec_handling ||’)’||  AS item_number_handling
	FROM Inventory
		ORDER BY aisle_number

